using System;
using System.Text;

namespace CodeGenerator
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(new ClosureGenerator().Generate());
        }
    }

    class ClosureGenerator
    {
        private readonly StringBuilder _codeBuilder = new StringBuilder();
        private int _indent;
        private int _column;

        public void Indent()
        {
            _indent++;
        }

        public void Unindent()
        {
            _indent--;
        }

        public string Generate()
        {
            Write($@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:{Environment.Version}
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------");
            WriteLine("");
            WriteLine("");

            // TypeOnlyFuncDelegateClosure
            for (int arity = 1; arity <= 16; arity++)
            {
                Write("sealed class TypeOnlyFuncDelegateClosure<");
                for (int j = 0; j < arity; j++)
                {
                    if (j > 0)
                    {
                        Write(", ");
                    }
                    Write($"T{j}");
                }
                Write(", R");
                Write("> : RequestDelegateClosure");
                WriteLine();
                WriteLine("{");
                Indent();
                Write("public override bool HasBody => ");
                for (int j = 0; j < arity; j++)
                {
                    if (j > 0)
                    {
                        Write(" || ");
                    }
                    Write($"ParameterBinder<T{j}>.HasBodyBasedOnType");
                }
                Write(";");
                WriteLine();
                WriteLine();
                for (int j = 0; j < arity; j++)
                {
                    WriteLine($"private readonly string _name{j};");
                }
                WriteLine("private readonly ResultInvoker<R> _resultInvoker;");
                Write("private readonly ");
                Write("Func<");
                for (int j = 0; j < arity; j++)
                {
                    if (j > 0)
                    {
                        Write(", ");
                    }
                    Write($"T{j}");
                }
                Write(", R>");
                WriteLine(" _delegate;");
                WriteLine();
                Write("public TypeOnlyFuncDelegateClosure(");
                Write("Func<");
                for (int j = 0; j < arity; j++)
                {
                    if (j > 0)
                    {
                        Write(", ");
                    }
                    Write($"T{j}");
                }
                Write(", R>");
                WriteLine(" @delegate, ParameterInfo[] parameters)");
                WriteLine("{");
                Indent();
                WriteLine("_delegate = @delegate;");
                WriteLine("_resultInvoker = ResultInvoker<R>.Create();");
                for (int j = 0; j < arity; j++)
                {
                    WriteLine($"_name{j} = parameters[{j}].Name!;");
                }
                Unindent();
                WriteLine("}"); //ctor

                WriteLine();
                WriteLine("public override Task ProcessRequestAsync(HttpContext httpContext)");
                WriteLine("{");
                Indent();
                for (int j = 0; j < arity; j++)
                {
                    WriteLine($"if (!ParameterBinder<T{j}>.TryBindValueBasedOnType(httpContext, _name{j}, out var arg{j}))");
                    WriteLine("{");
                    Indent();
                    WriteLine($"ParameterLog.ParameterBindingFailed<T{j}>(httpContext, _name{j});");
                    WriteLine("httpContext.Response.StatusCode = 400;");
                    WriteLine("return Task.CompletedTask;");
                    Unindent();
                    WriteLine("}");
                    WriteLine();
                }

                Write("R? result = _delegate(");
                for (int j = 0; j < arity; j++)
                {
                    if (j > 0)
                    {
                        Write(", ");
                    }
                    Write($"arg{j}");
                }
                WriteLine(");");

                WriteLine();
                WriteLine("return _resultInvoker.Invoke(httpContext, result);");

                Unindent();
                WriteLine("}"); // ProcessRequestAsync

                WriteLine();
                WriteLine("public override async Task ProcessRequestWithBodyAsync(HttpContext httpContext)");
                WriteLine("{");
                Indent();

                WriteLine("var success = false;");
                for (int j = 0; j < arity; j++)
                {
                    WriteLine($"(T{j}? arg{j}, success) = await ParameterBinder<T{j}>.BindBodyBasedOnType(httpContext, _name{j});");
                    WriteLine();
                    WriteLine("if (!success)");
                    WriteLine("{");
                    Indent();
                    WriteLine($"ParameterLog.ParameterBindingFailed<T{j}>(httpContext, _name{j});");
                    WriteLine("httpContext.Response.StatusCode = 400;");
                    WriteLine("return;");
                    Unindent();
                    WriteLine("}");
                    WriteLine();
                }

                Write("R? result = _delegate(");
                for (int j = 0; j < arity; j++)
                {
                    if (j > 0)
                    {
                        Write(", ");
                    }
                    Write($"arg{j}!");
                }
                WriteLine(");");

                WriteLine();
                WriteLine("return _resultInvoker.Invoke(httpContext, result);");

                Unindent();
                WriteLine("}");

                Unindent();
                WriteLine("}");
                WriteLine();
            }

            return _codeBuilder.ToString();
        }

        private void WriteLine()
        {
            WriteLine("");
        }

        private void WriteLineNoIndent(string value)
        {
            _codeBuilder.AppendLine(value);
        }

        private void WriteNoIndent(string value)
        {
            _codeBuilder.Append(value);
        }

        private void Write(string value)
        {
            if (_indent > 0 && _column == 0)
            {
                _codeBuilder.Append(new string(' ', _indent * 4));
            }
            _codeBuilder.Append(value);
            _column += value.Length;
        }

        private void WriteLine(string value)
        {
            if (_indent > 0 && _column == 0)
            {
                _codeBuilder.Append(new string(' ', _indent * 4));
            }
            _codeBuilder.AppendLine(value);
            _column = 0;
        }
    }
}
